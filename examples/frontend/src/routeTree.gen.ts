/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as GroupsIndexImport } from './routes/groups/index'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as PostsNewImport } from './routes/posts/new'
import { Route as GroupsNewImport } from './routes/groups/new'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIndexRoute = GroupsIndexImport.update({
  id: '/groups/',
  path: '/groups/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRoute,
} as any)

const PostsNewRoute = PostsNewImport.update({
  id: '/posts/new',
  path: '/posts/new',
  getParentRoute: () => rootRoute,
} as any)

const GroupsNewRoute = GroupsNewImport.update({
  id: '/groups/new',
  path: '/groups/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/groups/new': {
      id: '/groups/new'
      path: '/groups/new'
      fullPath: '/groups/new'
      preLoaderRoute: typeof GroupsNewImport
      parentRoute: typeof rootRoute
    }
    '/posts/new': {
      id: '/posts/new'
      path: '/posts/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof PostsNewImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/groups/': {
      id: '/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/groups/new': typeof GroupsNewRoute
  '/posts/new': typeof PostsNewRoute
  '/account': typeof AccountIndexRoute
  '/groups': typeof GroupsIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/groups/new': typeof GroupsNewRoute
  '/posts/new': typeof PostsNewRoute
  '/account': typeof AccountIndexRoute
  '/groups': typeof GroupsIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/groups/new': typeof GroupsNewRoute
  '/posts/new': typeof PostsNewRoute
  '/account/': typeof AccountIndexRoute
  '/groups/': typeof GroupsIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/groups/new'
    | '/posts/new'
    | '/account'
    | '/groups'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/groups/new'
    | '/posts/new'
    | '/account'
    | '/groups'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/sign-in'
    | '/groups/new'
    | '/posts/new'
    | '/account/'
    | '/groups/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignInRoute: typeof SignInRoute
  GroupsNewRoute: typeof GroupsNewRoute
  PostsNewRoute: typeof PostsNewRoute
  AccountIndexRoute: typeof AccountIndexRoute
  GroupsIndexRoute: typeof GroupsIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInRoute: SignInRoute,
  GroupsNewRoute: GroupsNewRoute,
  PostsNewRoute: PostsNewRoute,
  AccountIndexRoute: AccountIndexRoute,
  GroupsIndexRoute: GroupsIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/sign-in",
        "/groups/new",
        "/posts/new",
        "/account/",
        "/groups/",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/groups/new": {
      "filePath": "groups/new.tsx"
    },
    "/posts/new": {
      "filePath": "posts/new.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx"
    },
    "/groups/": {
      "filePath": "groups/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
